<%- include('./partials/header') %>

<body>
    <%- include('./partials/leftbar') %>


    <!-- Main Content Wrapper -->
    <div class="flex-1 ml-[16.6%] flex flex-row">
        <!-- Center Content -->
        <div class="w-2/3 p-5">
            
            <div class="flex flex-col gap-5 p-5">
                <div>
                    <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white mb-4"><%= blog.title %></h1>
                    <hr class="border-t-2 border-gray-300 dark:border-gray-600 my-4">
                </div>
                <div id="editor-container"><%- blog.body %></div>
                <div class="flex flex-col items-end">
                    <div class="flex items-center">
                        <img class="w-8 h-8 object-cover rounded-full" src="<%= blog?.createdBy.profileImageUrl %>" alt="Profile Image" />
                        <p class="text-sm text-gray-500 dark:text-gray-400">Written by: <%= blog?.createdBy.firstName %> <%= blog.createdBy.lastName %></p>
                    </div>
                    <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Posted on: <%= new Date(blog.createdAt).toDateString() %></p>
                </div>
            </div>
            
            <div class="container mx-auto mb-8 shadow p-5">
                <form class="grid grid-cols-10 mt-4">
                    <input name="comment" type="text" id="comment" class="col-span-8 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg rounded-r-none focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Add a comment" required />
                    <button type="submit" class="col-span-2 w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-l-none rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Submit</button>
                </form>
                <div class="mt-6 comments-container">
                    <h1 class="text-xl font-semibold">(<span><%= comments.length %></span>) Comments</h1>
                    <% comments.forEach(comment => { %>
                        
                        <div class="p-5 mt-4 <%= comment.isSpam ? 'bg-red-100' : 'bg-gray-50' %> dark:<%= comment.isSpam ? 'bg-red-900' : 'bg-gray-700' %> rounded-lg shadow relative" id="comment-<%= comment._id %>">
                            <div class="flex items-center">
                                <img class="w-6 h-6 object-cover rounded-full" src="<%= comment.createdBy.profileImageUrl %>" alt="Profile Image" />
                                <p class="text-sm text-gray-500 dark:text-gray-400 ml-2"><%= comment.createdBy.email %></p>
                                <% if (user && user._id.toString() === comment.createdBy._id.toString()) { %>
                                <!-- Three-dot menu -->
                                <div class=" flex relative ml-auto">
                                    <a href="#" class="px-4 py-2 underline text-sm text-gray-500 hover:text-gray-800" data-action="<%= comment.isSpam ? 'unspam' : 'spam'%>" data-comment-id="<%= comment._id %>"><%= comment.isSpam ? 'Unmark as Spam' : 'Mark as Spam' %></a>
                                    <a href="#" class="px-4 py-2 text-sm text-red-500 hover:text-red-700" data-action="delete" data-comment-id="<%= comment._id %>">Delete</a>  
                                </div>
                                <% } %>
                            </div>
                            <p class="mt-2 text-gray-900 dark:text-white"><%= comment.comment %></p>

                        </div>
                    <% }) %>
                </div>
            </div>
        </div>
        <!-- Right Sidebar -->
        <div class="w-1/3 p-6 bg-gray-200 mt-16">
            <h2 class="text-lg font-semibold">Right Sidebar</h2>
            <p class="mt-4">Additional content or widgets</p>
        </div>
    </div>



    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {

        const socket = io();

        // Listen for new comments from the server
        socket.on('commentAdded', (comment) => {
            const commentsContainer = document.querySelector('.comments-container');
            const newComment = `
                <div class="p-5 mt-4 ${comment.isSpam ? 'bg-red-100 dark:bg-red-900' : 'bg-gray-50 dark:bg-gray-700'} rounded-lg shadow relative" id="comment-${comment._id}">
                    <div class="flex items-center">
                        <img class="w-6 h-6 object-cover rounded-full" src="${comment.createdBy.profileImageUrl}" alt="Profile Image" />
                        <p class="text-sm text-gray-500 dark:text-gray-400 ml-2">${comment.createdBy.email}</p>
                        ${comment.createdBy._id.toString() === '<%= user?._id %>' ? `
                        <div class="relative ml-auto flex">
                            <a href="#" class="px-4 py-2 underline text-sm text-gray-500 hover:text-gray-800" data-action="${comment.isSpam ? 'unspam' : 'spam'}" data-comment-id="${comment._id}">${comment.isSpam ? 'Unmark as Spam' : 'Mark as Spam'}</a>
                            <a href="#" class="px-4 py-2 text-sm text-red-500 hover:text-red-700" data-action="delete" data-comment-id="${comment._id}">Delete</a>
                        </div>
                        ` : ''}
                    </div>
                    <p class="mt-2 text-gray-900 dark:text-white">${comment.comment}</p>
                </div>
            `;
            commentsContainer.innerHTML += newComment;

            const commentsCount = document.querySelector('.comments-container span');
            commentsCount.innerHTML = parseInt(commentsCount.innerHTML) + 1;
        });

        // Handle form submission for new comments
        document.querySelector('form').addEventListener('submit', function(e) {
            e.preventDefault();
            const commentInput = document.getElementById('comment');
            const comment = commentInput.value;
            const blogID = '<%= blog._id %>';
            const createdBy = '<%= user?._id %>';
            if (!createdBy) {
                window.location.href = '/login'; 
                return;
            }
            socket.emit('newComment', { comment, blogID, createdBy });
            commentInput.value = '';
        });

        // Event delegation for comment actions (delete, spam, unspam)
        document.querySelector('.comments-container').addEventListener('click', function(e) {
            if (e.target.matches('[data-action]')) {
                e.preventDefault();
                const action = e.target.getAttribute('data-action');
                const commentID = e.target.getAttribute('data-comment-id');

                if (action === 'delete') {
                    if (confirm('Are you sure you want to delete this comment?')) {
                        socket.emit('deleteComment', commentID);
                    }
                } else if (action === 'spam') {
                    if (confirm('Are you sure you want to mark this comment as spam?')) {
                        socket.emit('markToSpam', commentID);
                    }
                } else if (action === 'unspam') {
                    if (confirm('Are you sure you want to unmark this comment as spam?')) {
                        socket.emit('unmarkToSpam', commentID);
                    }
                }
            }
        });

        // Listen for comment deletion from the server
        socket.on('commentDeleted', (commentID) => {
            const commentElement = document.getElementById(`comment-${commentID}`);
            if (commentElement) {
                commentElement.remove();
                const commentsCount = document.querySelector('.comments-container span');
                commentsCount.innerHTML = parseInt(commentsCount.innerHTML) - 1;
            }
        });

        socket.on('commentMarkedAsSpam', (commentID) => {
            toggleSpamState(commentID, true);
        });

        socket.on('commentUnmarkedAsSpam', (commentID) => {
            toggleSpamState(commentID, false);
        });

        function toggleSpamState(commentID, isSpam) {
            const commentElement = document.getElementById(`comment-${commentID}`);
            if (commentElement) {
                const actionButton = commentElement.querySelector('[data-action]');
                if (isSpam) {
                    actionButton.setAttribute('data-action', 'unspam');
                    actionButton.innerHTML = 'Unmark as Spam';
                    commentElement.classList.add('bg-red-100', 'dark:bg-red-900');
                    commentElement.classList.remove('bg-gray-50', 'dark:bg-gray-700');
                } else {
                    actionButton.setAttribute('data-action', 'spam');
                    actionButton.innerHTML = 'Mark as Spam';
                    commentElement.classList.remove('bg-red-100', 'dark:bg-red-900');
                    commentElement.classList.add('bg-gray-50', 'dark:bg-gray-700');
                }
            }
        }

        });

    </script>
    <style>
        pre {
            background-color: hsl(210, 8%, 95%);
            border: 1px solid #E5E5E5;
            padding: 8px;
            margin: 2px 0px;
            border-radius: 6px;
        }
        blockquote {
            border-left: 5px solid #d6b2b2;
            padding: 5px 20px;
            margin: 0px 20px;
            font-weight: bold;
        }
    </style>
</body>
</html>
