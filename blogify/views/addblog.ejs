<%- include("./partials/summernoteHeader") %>
<body>
    <%- include("./partials/leftbar") %>
    <div class="flex-1 ml-[16.6%] flex flex-row">
        <div class="w-2/3 p-5">
        <form id="blogForm" class="w-full" action="/blog/add-new" method="POST" enctype="multipart/form-data">
            <div class="mb-5">
                <label for="title" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Title</label>
                <input name="title" type="text" id="title" class="w-full border p-2.5 rounded-lg" required />
            </div>
            <div class="mb-5">
                <label for="subtitle" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Subtitle</label>
                <textarea name="subtitle" id="subtitle" class="w-full border p-2.5 rounded-lg h-28" required ></textarea>
            </div>
            <div class="mb-5">
                <label for="body" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Content</label>
                <textarea id="summernote" name="content"></textarea>
            </div>
    
            <div class="mb-5">
                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white" for="coverImage">Cover Image</label>
                <input name="coverImage" class="block w-full mb-5 text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400" id="coverImage" type="file" accept="image/*" required>
            </div>
            <input type="text" name="tags" id="tags" hidden >
    
            <button type="submit" class="mt-6 w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Save Changes</button>
        </form>
        </div>
        <div class="w-1/3 p-6 bg-gray-200 mt-16">
            <div class="flex items-end justify-between">
                <h2 class="text-lg font-semibold">Select up to 5 tags</h2>
                <span id="tagCount" class="text-lg font-semibold text-green-500">0</span>
            </div>
            <div id="tagsContainer">
                <% tags.forEach(tag => { %>
                    <button class="tag-btn bg-gray-300 text-black py-1 px-3 m-1" data-tag="<%= tag.name %>"><%= tag.name %></button>
                <% }) %>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener("DOMContentLoaded", function() {
    $('#summernote').summernote({
        tabsize: 2,
        height: ($(window).height() - 300),
        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36', '48', '60', '72', '96'],
        toolbar: [
            ['style', ['style']],
            ['style', ['bold', 'italic', 'underline', 'clear']],
            ['font', ['strikethrough', 'superscript', 'subscript']],
            ['fontsize', ['fontsize']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['height', ['height']],
            ['insert', ['link', 'picture', 'video']],
            ['view', ['fullscreen', 'codeview', 'help']],
            ['table', ['table']],
        ],
        callbacks: {
            onImageUpload: function(files) {
                uploadImage(files[0]);
            }
        }
    });
    window.addEventListener('beforeunload', function() {
        fetch('/api/cleanup', {
            method: 'POST',
        }).catch(error => console.error('Error during cleanup:', error));
    })
    function uploadImage(file) {
        var formData = new FormData();
        formData.append('file', file);

        fetch('/api/upload/image', {
            method: 'POST',
            body: formData // `FormData` handles the content type automatically
        })
        .then(response => response.json())
        .then(data => {
            // Assuming the response contains a URL to the uploaded image
            const url = data.url;
            if (url) {
                // Insert the image into Summernote (assuming Summernote is available)
                $('#summernote').summernote('insertImage', url);
            }
        })
        .catch(error => {
            console.error('Error uploading image:', error);
        });
    }


    document.querySelector('form').addEventListener('submit', function(event) {
        event.preventDefault();

        // Create a new FormData object
        var formData = new FormData();
        const tags = document.getElementById('tags').value;
        if (!tags) {
            alert('Please select at least one tag.');
            return;
        }

        // Append the title, content, and the file to the FormData object
        formData.append('title', document.getElementById('title').value);
        formData.append('body', $('#summernote').val());
        formData.append('tags', document.getElementById('tags').value);
        formData.append('subtitle', document.getElementById('subtitle').value);

        // Append the file
        var coverImage = document.getElementById('coverImage').files[0];
        if (coverImage) {
            formData.append('coverImage', coverImage);
        }

        $.ajax({
            url: '/blog/add-new',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                window.location.href = '/';
            },
            error: function(xhr, status, error) {
                // Handle error
                console.error('Error creating blog:', error);
            }
        });

    });

    const tagButtons = document.querySelectorAll('.tag-btn');
    const hiddenTagsInput = document.getElementById('tags');
    const tagCountSpan = document.getElementById('tagCount');
    let selectedTags = [];

    tagButtons.forEach(button => {
        button.addEventListener('click', function() {
            const tag = button.getAttribute('data-tag');

            // Toggle tag selection
            if (selectedTags.includes(tag)) {
                selectedTags = selectedTags.filter(t => t !== tag);
                button.classList.remove('bg-blue-500', 'text-white');
                button.classList.add('bg-gray-300', 'text-black');
            } else if (selectedTags.length < 5) {
                selectedTags.push(tag);
                button.classList.remove('bg-gray-300', 'text-black');
                button.classList.add('bg-blue-500', 'text-white');
            }

            // Update hidden input and counter
            hiddenTagsInput.value = selectedTags.join(',');
            tagCountSpan.textContent = selectedTags.length;
        });
    });
});

    </script>
    
    <style>
        pre{
            background-color: aqua;
            background-color: hsl(210,8%,95%);
            border: 1px solid #E5E5E5;
            padding: 8px;
            margin: 2px 0px;
            border-radius: 6px;
        }
        blockquote{
            border-left: 5px solid #d6b2b2;
            padding:  5px 20px;
            margin: 0px 20px ;
            font-weight: bold;
        }
    </style>
</body>
</html>
